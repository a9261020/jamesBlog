(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{500:function(t,e,l){t.exports=l.p+"assets/img/18-completed.eda73c2e.jpg"},549:function(t,e,l){"use strict";l.r(e);var a=l(4),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:l(500),alt:"成品"}})]),t._v(" "),a("h2",{attrs:{id:"實現步驟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#實現步驟"}},[t._v("#")]),t._v(" 實現步驟")]),t._v(" "),a("ol",[a("li",[t._v("用一個對話方塊(.dialogue)包住 user 兩端(remote,local)")]),t._v(" "),a("li",[t._v("user 端都會有.avatar(selfie,name) .txt(聊天訊息)")]),t._v(" "),a("li",[t._v("每個 txt 旁邊都會有個小箭頭(用 ::before || ::after 都可以)")])]),t._v(" "),a("h2",{attrs:{id:"重點整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重點整理"}},[t._v("#")]),t._v(" 重點整理")]),t._v(" "),a("ul",[a("li",[t._v("flex 的特性")])]),t._v(" "),a("p",[t._v("會讓物件隨著內容縮小、放大，如果不要這個設定的話，在不想要跟著縮小放大的物件內設定：flex-shrink:0 (如果沒設定的話，訊息一堆就會將原本設定好的 avatar 撐開)")]),t._v(" "),a("p",[t._v("次軸預設會撐滿(stretch)，如果沒有設定的話，原本的 txt 會撐滿變得很大")]),t._v(" "),a("ul",[a("li",[t._v("overflow:hidden")])]),t._v(" "),a("p",[t._v("將父組件設定這個屬性，如果裡面子組件超過的話，就會消失")]),t._v(" "),a("ul",[a("li",[t._v("flex:order")])]),t._v(" "),a("p",[t._v("local 端的大頭會在右邊，所以將 local 端的 txt 設定為 order:-1，flex 的順序就會變成")]),t._v(" "),a("blockquote",[a("p",[t._v(".txt(-1) -> .avatar(0)")])]),t._v(" "),a("p",[t._v("這種狀況的話文字就會一直在右邊")]),t._v(" "),a("ul",[a("li",[t._v("jusify-content:flex-end")])]),t._v(" "),a("p",[t._v("要把 local 端一直設定在 flex 容器的最右邊，所以要設定 jusify-content:flex-end，不然內容不夠滿的話會無法靠右對齊")])])}),[],!1,null,null,null);e.default=r.exports}}]);